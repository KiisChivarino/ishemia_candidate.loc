<?php

namespace App\Services\TemplateBuilders\Admin;

use App\Services\FilterService\FilterService;
use App\Services\TemplateBuilders\AppTemplateBuilder;
use App\Services\TemplateItems\DeleteTemplateItem;
use App\Services\TemplateItems\EditTemplateItem;
use App\Utils\ReflectionClassHelper;
use Exception;
use Symfony\Component\Routing\RouteCollection;

/**
 * Class AdminTemplateBuilder
 *
 * @package App\Services\TemplateBuilders
 */
abstract class AdminTemplateBuilder extends AppTemplateBuilder
{
    /** @var string Default redirect route name */
    public const DEFAULT_REDIRECT_ROUTE_NAME = 'show';

    /** @var string Путь к общим шаблонам crud админки */
    public const DEFAULT_COMMON_TEMPLATE_PATH = 'admin/common_template/';

    /**
     * CountryTemplate constructor.
     *
     * @param RouteCollection $routeCollection
     * @param string $className
     *
     * @throws Exception
     */
    public function __construct(RouteCollection $routeCollection, string $className)
    {
        parent::__construct(
            $routeCollection,
            $className,
            self::DEFAULT_COMMON_TEMPLATE_PATH,
            self::DEFAULT_REDIRECT_ROUTE_NAME
        );
    }

    /**
     * @param object|null $entity
     *
     * @return AppTemplateBuilder
     */
    public function show(?object $entity = null): AppTemplateBuilder
    {
        parent::show($entity); // TODO: Change the autogenerated stub
        if ($entity !== null) {
            $this->getItem(EditTemplateItem::TEMPLATE_ITEM_EDIT_NAME)->getTemplateItemRoute()
                ->setRouteParams($this->getDefaultRouteParameters('edit', $entity));
            $this->getItem(DeleteTemplateItem::TEMPLATE_ITEM_DELETE_NAME)->getTemplateItemRoute()
                ->setRouteParams($this->getDefaultRouteParameters('delete', $entity));
        }
        return $this;
    }

    /**
     * @throws Exception
     */
    public function new(?FilterService $filterService = null): AppTemplateBuilder
    {
        parent::new($filterService);
        $this->setRedirectRoute(
            $this->getRouteInfo('show')['name'] ?: $this->getRouteInfo('index')['name']
        );
        return $this;
    }

    /**
     * @param object|null $entity
     *
     * @return AppTemplateBuilder
     * @throws Exception
     */
    public function edit(?object $entity = null): AppTemplateBuilder
    {
        parent::edit($entity);
        $this->setRedirectRoute(
            $this->getRouteInfo('show')['name'] ?: $this->getRouteInfo('index')['name'],
            $this->getDefaultRouteParameters('show', $entity)
        );
        if ($entity !== null) {
            $this->getItem(EditTemplateItem::TEMPLATE_ITEM_EDIT_NAME)->getTemplateItemRoute()
                ->setRouteParams($this->getDefaultRouteParameters('edit', $entity));
            $this->getItem(DeleteTemplateItem::TEMPLATE_ITEM_DELETE_NAME)->getTemplateItemRoute()
                ->setRouteParams($this->getDefaultRouteParameters('delete', $entity));
        }
        return $this;
    }

    /**
     * @throws Exception
     */
    public function delete(?object $entity = null): AppTemplateBuilder
    {
        parent::delete();
        $this->setRedirectRoute(
            $this->getRouteInfo('list')['name'] ?: $this->getRouteInfo('index')['name']
        );
        return $this;
    }

    /**
     * Creates parameters for route and fills their values with ids of entity
     *
     * @param string $routeName
     * @param object $entity
     *
     * @return array
     */
    public function getDefaultRouteParameters(string $routeName, object $entity): array
    {
        $routeInfo = $this->getRouteInfo($routeName);
        $routeParameters = [];
        if ($routeInfo !== null && ReflectionClassHelper::isMethodExists($entity, 'getId')) {
            foreach ($routeInfo['parameters'] as $parameterName) {
                $routeParameters[$parameterName] = $entity->getId();
            }
        }
        return $routeParameters;
    }
}